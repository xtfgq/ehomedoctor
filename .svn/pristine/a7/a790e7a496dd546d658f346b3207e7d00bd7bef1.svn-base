package com.zzu.ehome.ehomefordoctor.activity;

import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.igexin.sdk.PushManager;
import com.zzu.ehome.ehomefordoctor.R;
import com.zzu.ehome.ehomefordoctor.app.CommonApi;
import com.zzu.ehome.ehomefordoctor.fragment.HZFragment;
import com.zzu.ehome.ehomefordoctor.fragment.MsgFragment;
import com.zzu.ehome.ehomefordoctor.utils.SharePreferenceUtil;
import com.zzu.ehome.ehomefordoctor.view.CommonDialog;
import android.Manifest;
import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import io.rong.imkit.RongIM;
import io.rong.imkit.fragment.ConversationListFragment;
import io.rong.imlib.RongIMClient;
import io.rong.imlib.model.Conversation;

public class MainActivity extends BaseActivity {
    private static final int REQUEST_PERMISSION = 0;

    @BindView(R.id.image_msg)
    ImageView imageMsg;
    @BindView(R.id.tv_msg)
    TextView tvMsg;
    @BindView(R.id.layout_msg)
    RelativeLayout layoutMsg;
    @BindView(R.id.img_hz)
    ImageView imgHz;
    @BindView(R.id.tv_hz)
    TextView tvHz;
    @BindView(R.id.layout_hz)
    RelativeLayout layoutHz;
    private int index=0;
    private int selectColor;
    private int unSelectColor;
    private int currentTabIndex;
    private Fragment[] fragments;
    private RelativeLayout[] mTabs;
    private Fragment mConversationListFragment = null;
    private Fragment hzFragment;
    private String ClientID;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);
        init();
    }


    @Override
    public void init() {
        initGeTui();
        String token= SharePreferenceUtil.getInstance(this).getRongToken();
        if(!TextUtils.isEmpty(token)){
            CommonApi.connent(token, new CommonApi.RongIMListener() {
                @Override
                public void OnSuccess(String userid) {
                    RongIM.getInstance().getRongIMClient().setConnectionStatusListener(new MyConnectionStatusListener());

                }
            });
        }


        setOnlyTileViewMethod("消息");
        selectColor=getResources().getColor(R.color.bottom_text_color_pressed);
        unSelectColor=getResources().getColor(R.color.bottom_text_color_normal);
        mTabs = new RelativeLayout[2];
        mTabs[0] = layoutMsg;
        mTabs[1] = layoutHz;
        mConversationListFragment = initConversationList();
        hzFragment= HZFragment.getInstance();
        fragments = new Fragment[]{mConversationListFragment, hzFragment};
        getSupportFragmentManager().beginTransaction()
                .add(R.id.fragment_container, fragments[0])
                .commit();
    }


    @OnClick({R.id.layout_msg, R.id.layout_hz})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.layout_msg:
                index=0;
                setTitls(index);
                setTabs(index);
                break;
            case R.id.layout_hz:
                index=1;
                setTitls(index);
                setTabs(index);
                break;
        }
        selectItem(index);
    }
    private void selectItem(int index){
        if (currentTabIndex != index) {
            FragmentTransaction trx = getSupportFragmentManager()
                    .beginTransaction();

            trx.hide(fragments[currentTabIndex]);
            if (!fragments[index].isAdded()) {
                trx.add(R.id.fragment_container, fragments[index]);
            }
            trx.show(fragments[index]).commit();
        }
        mTabs[currentTabIndex].setSelected(false);
        mTabs[index].setSelected(true);
        currentTabIndex = index;
    }

    public void setTitls(int index){
        switch (index){
            case 0:
                setTitle("消息");
                break;
            case 1:
                setTitle("患者");
                break;
        }

    }


    public void setTabs(int index){
        resetImgs();
        switch (index){
            case 0:
                tvMsg.setTextColor(selectColor);
                imageMsg.setImageResource(R.mipmap.icon_message_pressed);
                break;
            case 1:
                tvHz.setTextColor(selectColor);
                imgHz.setImageResource(R.mipmap.icon_huanzhe_pressed);
                break;
        }

    }

    public void resetImgs(){
        tvMsg.setTextColor(unSelectColor);
        tvHz.setTextColor(unSelectColor);
        imageMsg.setImageResource(R.mipmap.icon_message_normal);
        imgHz.setImageResource(R.mipmap.icon_huanzhe_normal);
    }
    private void requestPermission() {
        ActivityCompat.requestPermissions(this, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_PHONE_STATE},
                REQUEST_PERMISSION);

    }
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == REQUEST_PERMISSION) {
            if ((grantResults.length == 2 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED)) {
                PushManager.getInstance().initialize(this.getApplicationContext());
            } else {
                Log.e("GetuiSdkDemo",
                        "we highly recommend that you need to grant the special permissions before initializing the SDK, otherwise some "
                                + "functions will not work");
                PushManager.getInstance().initialize(this.getApplicationContext());
            }
        } else {
            onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }
    private class MyConnectionStatusListener implements RongIMClient.ConnectionStatusListener {

        @Override
        public void onChanged(ConnectionStatus connectionStatus) {

            switch (connectionStatus){

                case CONNECTED://连接成功。
                    break;
                case DISCONNECTED://断开连接。

                    break;
                case CONNECTING://连接中。

                    break;
                case NETWORK_UNAVAILABLE://网络不可用。

                    break;
                case KICKED_OFFLINE_BY_OTHER_CLIENT://用户账户在其他设备登录，本机会被踢掉线

               runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            CommonDialog.confirmExit(MainActivity.this);
                        }
                    });

                    break;
            }
        }
    }
    private void initGeTui(){
        PackageManager pkgManager = getPackageManager();
        // 读写 sd card 权限非常重要, android6.0默认禁止的, 建议初始化之前就弹窗让用户赋予该权限
        boolean sdCardWritePermission =
                pkgManager.checkPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, getPackageName()) == PackageManager.PERMISSION_GRANTED;
        // read phone state用于获取 imei 设备信息
        boolean phoneSatePermission =
                pkgManager.checkPermission(Manifest.permission.READ_PHONE_STATE, getPackageName()) == PackageManager.PERMISSION_GRANTED;
        if (Build.VERSION.SDK_INT >= 23 && !sdCardWritePermission || !phoneSatePermission) {
            requestPermission();
        } else {
            // SDK初始化，第三方程序启动时，都要进行SDK初始化工作
            PushManager.getInstance().initialize(this.getApplicationContext());
            ClientID = PushManager.getInstance().getClientid(MainActivity.this);
        }
    }
    private Fragment initConversationList() {

            ConversationListFragment listFragment = ConversationListFragment.getInstance();
            Uri uri = Uri.parse("rong://" + getApplicationInfo().packageName).buildUpon()
                    .appendPath("conversationlist")
                    .appendQueryParameter(Conversation.ConversationType.PRIVATE.getName(), "false") //设置私聊会话是否聚合显示
                    .appendQueryParameter(Conversation.ConversationType.GROUP.getName(), "true")
                    .appendQueryParameter(Conversation.ConversationType.DISCUSSION.getName(), "false") //设置私聊会话是否聚合显示
                    .appendQueryParameter(Conversation.ConversationType.SYSTEM.getName(), "false") //设置私聊会话是否聚合显示
                    .build();
            listFragment.setUri(uri);
            return listFragment;

    }
}
